---
title: "Analyzing Missing Data in the Palmerpenguins Dataset"
author: 
  - Hechen Zhang
thanks: "Codes are available at: https://github.com/HechenZ123/Missing-Data-Analysis-Penguins-Dataset.git"
date: "today"
date-format: "long" 
abstract: "Peer reviewed by Dailin Li and Yanyu Wu"
format: pdf
toc: true
editor: visual
render:
  latex_engine: xelatex
bibliography: references.bib
---

\newpage

# 1.0. Introduction

Missingness in data is an essential aspect of data cleaning that is essential and must be dealt with care to tackle the discrepancies in the data. The missing values in the data can lead to statistical results that are prone to biases and significantly influencing the validity and reliability of statistical conclusions. Therefore, the aim of this analysis to to investigate into the missing values in the data set pertaining to penguins from 2007 to 2009 [@penguin]. It is essential to handle the missing value in the data set as the preliminary step of data cleaning to avoid skewed research findings based on reduced statistical power [@Salgado]. The following sections provide an in-depth analysis of the missing values in the data set along with employing simulated methods to understand the various types of missingness in the data.

## 1.1 Importing Important Packages.

Packages like `palmerpenguins` [@penguin] for accessing the penguins data, `tidyverse` by @tidyverse is used for data wrangling, `janitor` package by @janitor is used for data cleaning operations, `knitr` by @knitr for data presentation in data tables.The following code section aims at importing the important packages that are essential for examining the missing values in the data set.

```{r,warning=FALSE, message=FALSE}
library(palmerpenguins)
library(tidyverse)
library(ggplot2)
library(janitor)
library(knitr)
library(lubridate)
library(mice)
```

The following code cell stores the data set in an object called `df` while firstly changing it into a `tibble` structure and using the `clean_names` function from janitors package [@janitor]. Further, to view if the data is imported in the correct format, the first 6 rows of the data are viewed using the `head` function [@base].

```{r}
df <-
  penguins |>
  as_tibble() |>
  clean_names() 

head(df)
```

The data set consists of 344 rows and 8 columns.

```{r}
dim(df)
```

## 1.2. Data Overview.

In this section, we intend to get an overview of the data to understand the types of the data, each variable belongs to. Based on the output, it can be deduced that there are a few columns like species, islands and sex have *factor* data types instead of *character* type. While, the data in the column years is reported to have *integer* data type. Therefore further steps are important to rectify these data discrepancies.

```{r}
df|>
  glimpse()
```

The following code, corrects the data type of species, island and sex variables to *character* data type using the `as.character` function.

```{r}
df$species <- as.character(df$species)
df$island <- as.character(df$island)
df$sex <- as.character(df$sex)
df|>
  str()
```

The years column was incorrectly identified as an *integer* type, the `as.Date` function from the lubridate package by @lubridate is employed to change the years to *date* type.

```{r}
#| eval: false
df$year <- as.Date(paste(df$year, "-01-01", sep=""));
format(as.Date(paste(df$year, "01", "01", sep="-")), "%Y")
df|>
  str()
```

# 2.0. Data Sample simulation

Based on the output below, it can be reported that the *bill_length_mm, bill_depth_mm, flipper_length_mm and body_mass_g* columns have 2 missing values each. While there are 11 missing values in the sex column. Therefore, the following section drills deep into the missing values in the *bill_length_mm* column.

```{r}
colSums(is.na(df))|>
  kable()
  
```

The following code iterates 10 times to randomly select 2 species and ignore them while calculating the average of the *bill_length_mm*. It is therefore, reported based on the results of @tbl-species that on excluding the *Chinstrap and Gentoo* species while computing he mean, the mean, for the *bill_length_mm* is the lowest of 38.7.

```{r}
#| label: tbl-species
#| tbl-cap: "Summary Statistics Table"
# Initialize an empty tibble to store sample means
sample_means <- tibble(seed = c(), mean = c(), species_ignored = c())

for (i in 1:10) {
  set.seed(i)
  # Sample 2 species to ignore
  dont_get <- sample(x = unique(df$species), size = 2)
  
  # Average bill length excluding the sampled species
  sample_means <- sample_means |>
    rbind(tibble(
      seed = i,
      mean =
        df |>
        filter(!species %in% dont_get) |>
        summarise(mean = mean(bill_length_mm, na.rm = TRUE))|>
        pull(),
      species_ignored = toString(dont_get)
    ))
}

# Table
sample_means|>
  kable(col.names = c("Iteration", "Mean Bill Length (mm)", "Ignored Species"), digits =2, format.args = list(big.mark = ","), booktabs = TRUE)
```

The table below @tbl-summstat summarizes penguin data, indicating key statistics for various attributes: bill length ranges from 32.10 mm to 59.60 mm, with two missing values; bill depth ranges from 13.10 mm to 21.50 mm, also with two missing values. Flipper length ranges from 172.0 mm to 231.0 mm, with two missing values, and body mass ranges from 2700 g to 6300 g, again with two missing values.\

```{r}
#| label: tbl-summstat
#| tbl-cap: "Summary Statistics Table"
df|>
  summary()|>
  kable()

```

## 2.1. Data Missing Completely At Random (MCAR).

This section of the coding exercise, simulates a situation in which generates data that has missing values completely at random (MCAR). Therefore, the data for the *bill_length_mm* is removed at random. Based on the results @tbl-summstat1, it can be reported that the data for the MCAR simulation has a slightly smaller missing value of 43.91 compared to the actual mean of the original data set.

```{r}
#| label: tbl-summstat1
#| tbl-cap: "Summary Statistics Table: (MCAR)"
set.seed(1122)

#removing the "bill_length_mm" data for three randomly selected penguins
sample_indices <- sample(x = 1:nrow(df), size = 3, replace = FALSE)

penguins_MCAR <- penguins |>
  mutate(bill_length_mm = if_else(row_number() %in% sample_indices, NA_real_, bill_length_mm))

summary(penguins_MCAR)|>
  kable()

```

## 2.2. Data Missing At Random (MAR).

This section simulates a scenario, wherein missing values are simulated at random for *bill_length_mm* based on the species. The `mutate()` function is used to assign NA to the *bill_length_mm* columns with the species having the longest average bill length. The objective of this simulation is to replicate missing values using the maximum *bill_length_mm* of the species and to assess the impact of the missing values on results. Therefore, from @tbl-summstat2, it can be noted that there a significant decline in the average value of the *bill_length_mm* from an original value of 43.92 to a value of 42.70.

```{r}
#| label: tbl-summstat2
#| tbl-cap: "Summary Statistics Table:(MAR)"

#species with the highest average bill_length_mm
highest_bill_length_species <- penguins |>
  group_by(species)|>
  summarise(average_bill_length = mean(bill_length_mm, na.rm = TRUE))|>
  slice_max(average_bill_length, n = 1) |>
  pull(species)

# Simulate Missing at Random (MAR) for bill_length_mm based on the selected species
penguins_MAR <- penguins |>
  mutate(bill_length_mm =
           if_else(species %in% highest_bill_length_species, NA_real_, bill_length_mm))

# Summary of the modified dataset
summary(penguins_MAR)|>
  kable()
```

## 2.3. Data Missing Not At Random (MNAR).

The following simulation assesses the investigation into the potential biases in the data patterns induced due to missing values in the data of *bill_length_mm* due to the species that have an above average bill length. Based on the @tbl-summstat3, it can be stated that there is a significant decrease in the average *bill_length_mm* of the penguins when the data is missing but not at random.

```{r}
#| label: tbl-summstat3
#| tbl-cap: "Summary Statistics Table:(MNAR)"
# Determine the species with the highest average bill length
highest_bill_length_species <- df |>
  group_by(species) |>
  summarise(average_bill_length = mean(bill_length_mm, na.rm = TRUE)) |>
  slice_max(order_by = average_bill_length, n = 2) |>
  pull(species)

# Simulate MNAR for bill_length_mm based on the selected species
penguins_MNAR <- df |>
  mutate(bill_length_mm =
           if_else(species %in% highest_bill_length_species,
                   NA_real_,
                   bill_length_mm))

summary(penguins_MNAR)|>
  kable()
```

# 3.0. Imputing Missing Values.

The missing values in the data set are imputed using the `mice` package by @mice. The `mice()` function uses the imputation method where missing values are imputed based on the observation values of each variable. Based on @tbl-impute, it can be see that the data set does not have any missing values and that the missingness in the data is dealt with without dropping any observation that could have lead to loss of information.

```{r}
#| label: tbl-impute
#| tbl-cap: "Missing Values aafter imutation."
# multiple imputation
multiple_imputation <- mice(df, m = 5, method = 'pmm', print = FALSE)

# dataset after imputing
df_imputed <- complete(multiple_imputation, action = 1)|>
  as_tibble()

# checking for missing values in each column
colSums(is.na(df_imputed))|>
  kable()
  

```

This section of the code assesses if the mean imputation for the missing values in the *bill_length_mm* variable for all three species as suggested to me by **Dailin Li**. It can be stated, based on @tbl-meanimpute that the imputed values closely resemble the the actual values and therefore the method of mean imputation is valid for this data set. I further deduced based on the suggested method by **Yanyu Wu** that since the number of missing values were significantly lower, there would be lower probability of biases in the data due to mean imputation as there are no outliers, that would skew the mean.

```{r}
#| label: tbl-meanimpute
#| tbl-cap: "Comparive Analysis Mean Imputation."

# Calculating the mean for input replacement (simple mean imputation)
mean_bill_length <- mean(df$bill_length_mm, na.rm = TRUE)

# Replacing NA in bill_length_mm with mean_bill_length for simple mean imputation
df_input_mean <- df
df_input_mean$bill_length_mm[is.na(df$bill_length_mm)] <- mean_bill_length

# Actual mean by species
actual_by_species <- df |>
  group_by(species) |>
  summarize(Actual = mean(bill_length_mm, na.rm = TRUE))

# Input mean by species
input_mean_by_species <- df_input_mean|>
  group_by(species)|>
  summarize(Input_mean = mean(bill_length_mm))

# Multiple imputation mean by species from df_imputed
multi_imp_by_species <- df_imputed |>
  group_by(species) |>
  summarize(Multiple_imputation = mean(bill_length_mm))

# Merging the tables together
comparison_table <- reduce(list(actual_by_species, input_mean_by_species, multi_imp_by_species), full_join, by = "species")
comparison_table|>
  kable()
```

# 4.0. Comparative Mean

A comparison of missing data handling strategies in the penguin data set offers insights about their impact on calculating overall bill length based on @tbl-comp. The *Drop_missing* and *Input_mean* techniques produce similar overall mean bill lengths of roughly 43.92 mm, indicating the elimination of missing data and simple mean imputation. Multiple imputation produces a slightly higher mean of approximately 43.93 mm, demonstrating its capacity to capture uncertainty. The *Actual_mean*, determined from the original data set, closely matches the means obtained from the drop_missing and input_mean approaches, showing the importance of evaluating the true data distribution. These findings illustrate the trade-offs between simplicity and accuracy in managing missing data, emphasizing the benefits of approaches such as multiple imputation in capturing variability.

```{r}
#| label: tbl-comp
#| tbl-cap: "Comparetive Analysis."
# Drop missing observations for bill_length_mm to calculate the mean
mean_bill_length_drop_missing <- mean(df$bill_length_mm, na.rm = TRUE)
# Input mean
df_input_mean <- df
df_input_mean$bill_length_mm[is.na(df_input_mean$bill_length_mm)] <- mean_bill_length_drop_missing

# multiple imutation mean
multiple_imputation <- mice(df, m = 5, method = 'pmm', maxit = 5, print = FALSE, seed = 123)
df_imputed <- complete(multiple_imputation, action = 1) |> 
  as_tibble()

#  overall mean for each method
overall_mean_drop_missing <- mean_bill_length_drop_missing
overall_mean_input_mean <- mean(df_input_mean$bill_length_mm)
overall_mean_multiple_imputation <- mean(df_imputed$bill_length_mm)
overall_mean_actual <- mean(df$bill_length_mm, na.rm = TRUE)

# comparison table
comparison_table <- data.frame(
  Observation = c("Overall"),
  Drop_missing = overall_mean_drop_missing,
  Input_mean = overall_mean_input_mean,
  Multiple_imputation = overall_mean_multiple_imputation,
  Actual = overall_mean_actual
)

# Printing the comparison table
comparison_table|>
  kable()

```

# References:
